package types

import (
	"github.com/cosmos/cosmos-sdk/codec"
	codectypes "github.com/cosmos/cosmos-sdk/codec/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
)

// Codec registration functions
func RegisterLegacyAminoCodec(cdc *codec.LegacyAmino) {
	cdc.RegisterConcrete(&MsgUploadFile{}, "doctorium/filehash/MsgUploadFile", nil)
}

// RegisterInterfaces registers module interfaces
func RegisterInterfaces(registry codectypes.InterfaceRegistry) {
	registry.RegisterImplementations((*sdk.Msg)(nil),
		&MsgUploadFile{},
	)
}

// ModuleCdc references the global Amino codec to be used throughout the module.
var ModuleCdc = codec.NewLegacyAmino()

// MsgUploadFile defines a message for uploading a file hash
type MsgUploadFile struct {
	Creator  string `json:"creator"`
	FileHash string `json:"file_hash"`
}

// Route returns the module's RouterKey
func (m *MsgUploadFile) Route() string { return RouterKey }

// Type returns the action name
func (m *MsgUploadFile) Type() string { return "UploadFile" }

// GetSigners returns the addresses of signers that must sign.
func (m *MsgUploadFile) GetSigners() []sdk.AccAddress {
	addr, _ := sdk.AccAddressFromBech32(m.Creator)
	return []sdk.AccAddress{addr}
}

// GetSignBytes gets the canonical byte representation of the message.
func (m *MsgUploadFile) GetSignBytes() []byte {
	bz := ModuleCdc.MustMarshalJSON(m)
	return sdk.MustSortJSON(bz)
}

// ValidateBasic does a simple validation check that doesn't require access to any other information.
func (m *MsgUploadFile) ValidateBasic() error {
	if len(m.Creator) == 0 {
		return ErrInvalidAddress
	}
	if len(m.FileHash) == 0 {
		return ErrEmptyHash
	}
	return nil
}
